<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="es">
  <compounddef id="classPalabras" kind="class" language="C++" prot="public">
    <compoundname>Palabras</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPalabras_1a97ff3ff2640683ec87b3d6d53d630ab2" prot="private" static="no" mutable="no">
        <type>string</type>
        <definition>string Palabras::idioma</definition>
        <argsstring></argsstring>
        <name>idioma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>el idioma del conjunto de palabras </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="8" column="11" bodyfile="include/palabras.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPalabras_1a2b8b58366f256b39e023d881f77023fa" prot="private" static="no" mutable="no">
        <type><ref refid="classVD" kindref="compound">VD</ref>&lt; <ref refid="classPalabra" kindref="compound">Palabra</ref> &gt;</type>
        <definition>VD&lt;Palabra&gt; Palabras::datos</definition>
        <argsstring></argsstring>
        <name>datos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Se mantiene las palabras ordenadas por palabra y tipo </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="9" column="7" bodyfile="include/palabras.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classPalabras_1a1ec72f402f38c87a729cc9f550fe3c72" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Palabras::esta</definition>
        <argsstring>(const string &amp;a, const string &amp;tipo, int &amp;pos) const</argsstring>
        <name>esta</name>
        <param>
          <type>const string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>tipo</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>i la palabra a con tipo esta en <ref refid="classPalabras" kindref="compound">Palabras</ref>. Si esta pos indica la posicion donde esta en datos. En caso contrario pos indica donde deberia insertarse </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>la palabra </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>tipo de palabra </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>posicion de palabra </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true si encontramos la palabra y false si no lo encontramos </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="19" column="9" bodyfile="src/palabras.cpp" bodystart="4" bodyend="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPalabras_1ab5a3dcf1b13ac84505ba7efb398041e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Palabras::Palabras</definition>
        <argsstring>()</argsstring>
        <name>Palabras</name>
        <briefdescription>
<para>Constructor por defecto de la clase. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="25" column="4" bodyfile="include/palabras.h" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classPalabras_1ad0e01a81ee7f67f9a9effb5c427098fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPalabra" kindref="compound">Palabra</ref> &amp;</type>
        <definition>Palabra &amp; Palabras::operator[]</definition>
        <argsstring>(int i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Devuelve una referencoa al objeto i-th. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>indice del elemento a devolver </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>una referencia al objeto i-th </para>
</simplesect>
<simplesect kind="pre"><para>i&gt;=0 y i&lt;datos.size() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="33" column="12" bodyfile="src/palabras.cpp" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classPalabras_1a078e4471b4d306bd2b827031e53dd901" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classPalabra" kindref="compound">Palabra</ref> &amp;</type>
        <definition>const Palabra &amp; Palabras::operator[]</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="34" column="18" bodyfile="src/palabras.cpp" bodystart="35" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classPalabras_1ae3f43329c7f4e18608e141ca842b4acd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Palabras::insert</definition>
        <argsstring>(const Palabra &amp;P)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classPalabra" kindref="compound">Palabra</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>se inserta una nueva palabra </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>palabra a insertar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="40" column="9" bodyfile="src/palabras.cpp" bodystart="46" bodyend="53"/>
        <references refid="classPalabra_1a094c2428e5f94ecbef0df56977c214fd" compoundref="palabra_8h" startline="54" endline="54">Palabra::getPalabra</references>
        <references refid="classPalabra_1ac37f9a48f571a2c856d087023b6ea265" compoundref="palabra_8h" startline="48" endline="48">Palabra::getTipo</references>
        <referencedby refid="classPalabras_1a354729766d8e5d6308a5d720a939e794" compoundref="palabras_8cpp" startline="70" endline="78">getOrdenadasTipo</referencedby>
        <referencedby refid="classPalabras_1aafbd65e0255fc6950af20f7fe123286a" compoundref="palabras_8cpp" startline="130" endline="141">getPalabrasTipo</referencedby>
      </memberdef>
      <memberdef kind="function" id="classPalabras_1a7af096b8fe3fae22585ca65431bbc986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Palabras::erase</definition>
        <argsstring>(const string &amp;a, const string &amp;tipo)</argsstring>
        <name>erase</name>
        <param>
          <type>const string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>tipo</declname>
        </param>
        <briefdescription>
<para>se borra la palabra con valor a y tipo </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>valor de la palabra </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tipo</parametername>
</parameternamelist>
<parameterdescription>
<para>tipo de la palabra </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>la palabra que queremos eliminar debe existir </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="48" column="9" bodyfile="src/palabras.cpp" bodystart="56" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classPalabras_1a99e82bae03763905c3c6306b5d093a56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Palabras::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>obterner tamaño de palabras insertadas </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>numero de palabras insertadas </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="54" column="8" bodyfile="src/palabras.cpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classPalabras_1a354729766d8e5d6308a5d720a939e794" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPalabras" kindref="compound">Palabras</ref></type>
        <definition>Palabras Palabras::getOrdenadasTipo</definition>
        <argsstring>() const</argsstring>
        <name>getOrdenadasTipo</name>
        <briefdescription>
<para>Obtiene un nuevo conjunto de palabras ordenadas por tipo y a igualdad ordenadas por valor de palabra. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>nuevo conjunto de palabras ordenadas </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="60" column="13" bodyfile="src/palabras.cpp" bodystart="70" bodyend="78"/>
        <references refid="classPalabras_1ae3f43329c7f4e18608e141ca842b4acd" compoundref="palabras_8cpp" startline="46" endline="53">insert</references>
      </memberdef>
      <memberdef kind="function" id="classPalabras_1a06aeab455472d661e591d910f2393566" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVD" kindref="compound">VD</ref>&lt; string &gt;</type>
        <definition>VD&lt; string &gt; Palabras::getDiferentTipos</definition>
        <argsstring>() const</argsstring>
        <name>getDiferentTipos</name>
        <briefdescription>
<para>obtiene lso tipos didferentes en el conjunto. Ordenados de mayor a menor tipo. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>tipos didferentes en el conjunto </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="66" column="7" bodyfile="src/palabras.cpp" bodystart="80" bodyend="128"/>
        <references refid="classVD_1afb2a22b736a1d35c818eb548a6789819" compoundref="vd_8cpp" startline="97" endline="106">VD&lt; T &gt;::insert</references>
        <references refid="classVD_1a411ad026db1c8e0617d9031f1f1017a5" compoundref="vd_8cpp" startline="75" endline="78">VD&lt; T &gt;::size</references>
      </memberdef>
      <memberdef kind="function" id="classPalabras_1aafbd65e0255fc6950af20f7fe123286a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPalabras" kindref="compound">Palabras</ref></type>
        <definition>Palabras Palabras::getPalabrasTipo</definition>
        <argsstring>(string tipo) const</argsstring>
        <name>getPalabrasTipo</name>
        <param>
          <type>string</type>
          <declname>tipo</declname>
        </param>
        <briefdescription>
<para>obtiene todas las palabras de un determinado tipo </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>todas las palabras de un determinado tipo </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="72" column="13" bodyfile="src/palabras.cpp" bodystart="130" bodyend="141"/>
        <references refid="classPalabras_1ae3f43329c7f4e18608e141ca842b4acd" compoundref="palabras_8cpp" startline="46" endline="53">insert</references>
      </memberdef>
      <memberdef kind="function" id="classPalabras_1ac8a7d4ee275cb6752cddde26142d3475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVD" kindref="compound">VD</ref>&lt; string &gt;</type>
        <definition>VD&lt; string &gt; Palabras::getTipoPalabra</definition>
        <argsstring>(const string &amp;a)</argsstring>
        <name>getTipoPalabra</name>
        <param>
          <type>const string &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>obtenemos tipo(s) de una palabra </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>tipo(s) de una palabra </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="78" column="7" bodyfile="src/palabras.cpp" bodystart="143" bodyend="159"/>
        <references refid="classVD_1afb2a22b736a1d35c818eb548a6789819" compoundref="vd_8cpp" startline="97" endline="106">VD&lt; T &gt;::insert</references>
      </memberdef>
      <memberdef kind="function" id="classPalabras_1a644f2bbe4507f944c05ea84a57382e87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Palabras::areSinonimos</definition>
        <argsstring>(const string &amp;s1, const string &amp;s2, const string &amp;tipo) const</argsstring>
        <name>areSinonimos</name>
        <param>
          <type>const string &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>tipo</declname>
        </param>
        <briefdescription>
<para>omprueba si dos palabras de un determinado tipo son sinonimas. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="84" column="9" bodyfile="src/palabras.cpp" bodystart="177" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classPalabras_1add3d5ef4d012cc49e7bb00c67b7f0f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Palabras::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>limpia los datos </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="89" column="9" bodyfile="src/palabras.cpp" bodystart="200" bodyend="203"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classPalabras_1a028c7efba1d73451098771bb45391132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream &amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;is, Palabras &amp;P)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classPalabras" kindref="compound">Palabras</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>Operador de entrada de una palabra. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>stream de entrada </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>palabra </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="96" column="19" bodyfile="src/palabras.cpp" bodystart="161" bodyend="175"/>
      </memberdef>
      <memberdef kind="friend" id="classPalabras_1ad76a816da3b19e97704dcc5b851d564f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Palabras &amp;P)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classPalabras" kindref="compound">Palabras</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
<para>Operador de salida. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>stream de salida </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>Parabra a escribir </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/palabras.h" line="103" column="11" bodyfile="src/palabras.cpp" bodystart="190" bodyend="198"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/palabras.h" line="5" column="1" bodyfile="include/palabras.h" bodystart="6" bodyend="104"/>
    <listofallmembers>
      <member refid="classPalabras_1a644f2bbe4507f944c05ea84a57382e87" prot="public" virt="non-virtual"><scope>Palabras</scope><name>areSinonimos</name></member>
      <member refid="classPalabras_1add3d5ef4d012cc49e7bb00c67b7f0f48" prot="public" virt="non-virtual"><scope>Palabras</scope><name>clear</name></member>
      <member refid="classPalabras_1a2b8b58366f256b39e023d881f77023fa" prot="private" virt="non-virtual"><scope>Palabras</scope><name>datos</name></member>
      <member refid="classPalabras_1a7af096b8fe3fae22585ca65431bbc986" prot="public" virt="non-virtual"><scope>Palabras</scope><name>erase</name></member>
      <member refid="classPalabras_1a1ec72f402f38c87a729cc9f550fe3c72" prot="private" virt="non-virtual"><scope>Palabras</scope><name>esta</name></member>
      <member refid="classPalabras_1a06aeab455472d661e591d910f2393566" prot="public" virt="non-virtual"><scope>Palabras</scope><name>getDiferentTipos</name></member>
      <member refid="classPalabras_1a354729766d8e5d6308a5d720a939e794" prot="public" virt="non-virtual"><scope>Palabras</scope><name>getOrdenadasTipo</name></member>
      <member refid="classPalabras_1aafbd65e0255fc6950af20f7fe123286a" prot="public" virt="non-virtual"><scope>Palabras</scope><name>getPalabrasTipo</name></member>
      <member refid="classPalabras_1ac8a7d4ee275cb6752cddde26142d3475" prot="public" virt="non-virtual"><scope>Palabras</scope><name>getTipoPalabra</name></member>
      <member refid="classPalabras_1a97ff3ff2640683ec87b3d6d53d630ab2" prot="private" virt="non-virtual"><scope>Palabras</scope><name>idioma</name></member>
      <member refid="classPalabras_1ae3f43329c7f4e18608e141ca842b4acd" prot="public" virt="non-virtual"><scope>Palabras</scope><name>insert</name></member>
      <member refid="classPalabras_1ad76a816da3b19e97704dcc5b851d564f" prot="public" virt="non-virtual"><scope>Palabras</scope><name>operator&lt;&lt;</name></member>
      <member refid="classPalabras_1a028c7efba1d73451098771bb45391132" prot="public" virt="non-virtual"><scope>Palabras</scope><name>operator&gt;&gt;</name></member>
      <member refid="classPalabras_1ad0e01a81ee7f67f9a9effb5c427098fa" prot="public" virt="non-virtual"><scope>Palabras</scope><name>operator[]</name></member>
      <member refid="classPalabras_1a078e4471b4d306bd2b827031e53dd901" prot="public" virt="non-virtual"><scope>Palabras</scope><name>operator[]</name></member>
      <member refid="classPalabras_1ab5a3dcf1b13ac84505ba7efb398041e3" prot="public" virt="non-virtual"><scope>Palabras</scope><name>Palabras</name></member>
      <member refid="classPalabras_1a99e82bae03763905c3c6306b5d093a56" prot="public" virt="non-virtual"><scope>Palabras</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
